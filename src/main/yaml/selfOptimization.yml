variables:
  fileName: &fileName
    "self-optimization"
  path: &path
    "data/self-optimization"
  seed: &seed
    min: 0
    max: 20
    step: 1
    default: 0
  radius: &leaderRadius
    100.0
  maxResource: &maxResource
    1000.0
  resourceLowerBound: &resourceLowerBound
    1.0
  maxChildren: &maxChildren
    5
  minSpanWait: &minSpanWait
    20.0
  layerX: &layerX
    10
  width: &width
    10
  leftStart: &leftStart
    -4
  height: &height
    20
  maxY: &maxY
    20
  minY: &minY
    0
  maxSuccess: &maxSuccess
    formula: *maxResource
  gaussianShape: &gaussianShape
    5
  initialNodes: &initialNodes
    type: ArbitraryVariable
    parameters: [ 45.0, [ 1.0, 10.0, 100.0, 1000.0, 10000.0 ] ]
  cloningRange: &cloningRange
    3

network-model:
  type: ConnectWithinDistance
  parameters: [3.50]

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [*layerX, *minY, *maxSuccess, *gaussianShape]
    molecule: successSource
  - type: BidimensionalGaussianLayer
    parameters: [*layerX, *maxY, *maxResource, *gaussianShape]
    molecule: localResource

incarnation: collektive

_pool: &program
  - time-distribution: 1
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [ it.unibo.collektive.vmc.VMCSpawningKt.withSpawning]

deployments:
  - type: Rectangle
    parameters: [*initialNodes, *leftStart, 0, *width, *height]
    programs:
      - *program
    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LeaderSensorProperty
        parameters: [ *leaderRadius ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [*resourceLowerBound, *maxResource]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.DeviceSpawner
        parameters: [ *cloningRange, *maxChildren, *minSpanWait ]
  - type: Rectangle
    parameters: [*initialNodes, *width, 0, *width, *height]
    programs:
      - *program
    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LeaderSensorProperty
        parameters: [ *leaderRadius ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [ *resourceLowerBound, *maxResource ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.DeviceSpawner
        parameters: [ *cloningRange, *maxChildren, *minSpanWait ]

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: *fileName
      interval: 1.0
      exportPath: *path
    data:
      - time
      - type: NumberOfNodes
      - type: NetworkHub
      - type: NumberOfLeaves
      - type: NetworkDensity
      - type: SubnetworksDiameter
        parameters:
          filter: onlyfinite
          aggregators: [ min, max, mean, variance, median, StandardDeviation ]
          precision: 3
      - type: NodeDegree
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, variance, median, StandardDeviation ]
      - molecule: local-success
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: resource
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: success
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-resource
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: leader
        aggregators: [ Sum ]
        property: if(it) 1 else 0