variables:
  fileName: &fileName
    "optimizing-field-vmc-fixed-leader"
  path: &path
    "data/optimizing-field-vmc-fixed-leader"
  cloningRange: &cloningRange
    formula: 5
  gaussianShape: &gaussianShape
    5
  leaderRadius: &leaderRadius
    100.0
  maxChildren: &maxChildren
    3.0
  maxResource: &maxResource
    type: ArbitraryVariable
    parameters: [ 350.0, [ 100.0, 200.0, 300.0, 500.0, 1000.0 ] ]
  maxSuccess: &maxSuccess
    type: ArbitraryVariable
    parameters: [ 500.0, [ 100.0, 200.0, 300.0, 500.0, 1000.0 ] ]
  resourceLowerBound: &resourceLowerBound
    type: LinearVariable
    parameters: [ 5.0, 1.0, 10.0, 1.0 ]
  range: &range
    formula: cloningRange * 1.01
  goal: &goal
    formula: |
      it.unibo.Goal()
    language: kotlin
  seed: &seed
    min: 0
    max:
      formula: System.getenv("MAX_SEED").toDouble()
      language: kotlin
    step: 1
    default: 0
  metrics: &metrics
    formula: |
      it.unibo.MetricsForTermination()
    language: kotlin

network-model:
  type: ConnectWithinDistance
  parameters: *range

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [0, 25, *maxSuccess, *gaussianShape]
    molecule: successSource

incarnation: collektive

_pool: &program
  - time-distribution: 1
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.vmc.FieldVMCFixedLeaderKt.fixedRootStability]

deployments:
  - type: Point
    parameters: [0, 0]
    programs:
      - *program
    contents:
      - molecule: leader
        concentration: true
    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LeaderSensorProperty
        parameters: [ *leaderRadius ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [*resourceLowerBound, *maxResource]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.DeviceSpawner
        parameters: [ *cloningRange, *maxChildren ]

terminate:
  type: MetricsStableForTime
  parameters: {
    stableForTime: 30.0,
    timeIntervalToCheck: 2.0,
    equalTimes: 3,
    metricsToCheck: *metrics,
  }

launcher:
  type: it.unibo.alchemist.boundary.launchers.NelderMeadLauncher
  parameters: {
    objectiveFunction: *goal,
    variables: [ "maxResource", "resourceLowerBound", "maxSuccess" ],
    seedName: "seed",
    repetitions: 500,
  }

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: *fileName
      interval: 1.0
      exportPath: *path
    data:
      - time
      - type: NumberOfNodes
      - type: NetworkHub
      - type: NumberOfLeaves
      - type: NetworkDensity
      - type: NetworkDiameter
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, median ]
      - type: NodeDegree
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, variance, median, StandardDeviation ]
