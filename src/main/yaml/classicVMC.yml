variables:
  cloningRange: &cloningRange
    formula: 5
  constCompetitionRate: &constCompetitionRate
    1
  constConsumptionRate: &constConsumptionRate
    0.1
  constProductionRate: &constProductionRate
    0.1
  constTransferRate: &constTransferRate
    0.5
  gaussianShape: &gaussianShape
    5
  maxChildren: &maxChildren
    type: ArbitraryVariable
    parameters: [ 3.0, [1.0, 2.0, 3.0, 5.0 ] ]
#    formula: System.getenv("MAX_CHILDREN").toInt() #3
#    language: kotlin
  maxResource: &maxResource
    type: ArbitraryVariable
    parameters: [ 3.0, [ 1.5, 3.0, 4.5, 6.0, 7.5 ] ]
#    parameters: [ 3.0, [ 1.0, 2.0, 3.0, 5.0, 10.0 ] ]
#    formula: System.getenv("MAX_RESOURCE").toDouble() #1
#    language: kotlin
  maxSuccess: &maxSuccess
    type: ArbitraryVariable
    parameters: [ 500.0, [ 250.0, 500.0, 750.0, 900.0 ] ]
#    parameters: [ 500.0, [ 100.0, 300.0, 500.0, 1000.0 ] ]
#    formula: System.getenv("MAX_SUCCESS").toDouble() #500.0
#    language: kotlin
  minSpawnWait: &minSpawnWait
    type: LinearVariable
    parameters: [ 40.0, 1.0, 71.0, 10.0 ]
#    formula: System.getenv("MIN_SPAWN_WAIT").toInt() #21
#    language: kotlin
  range: &range
    formula: cloningRange * 1.01
  resourceLowerBound: &resourceLowerBound
    type: LinearVariable
    parameters: [ 5.0, 1.0, 10.0, 1.0 ]
#    formula: System.getenv("RESOURCE_LOWER_BOUND").toDouble() #1.0
#    language: kotlin
  sensorCompetitionRate: &sensorCompetitionRate
    0.1
  sensorProductionRate: &sensorProductionRate
    1.0
  sensorTransferRate: &sensorTransferRate
    0.5
  vesselsAdaptationRate: &vesselsAdaptationRate
    0.9
  seed: &seed
    min: 0
    max: 10
    step: 1
    default: 0

network-model:
  type: ConnectWithinDistance
  parameters: *range

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [5, 25, *maxSuccess, *gaussianShape ]
    molecule: successSource

incarnation: collektive

_pool: &program
  - time-distribution:
      type: DiracComb
      parameters: [ 0, 1 ]
    type: Event
    actions:
      - type: EvaluateSuccess
        parameters: [ *constProductionRate, *constTransferRate, *sensorProductionRate, *sensorTransferRate ]
      - type: ResourceDistribution
        parameters: [ *constConsumptionRate, *constCompetitionRate, *sensorCompetitionRate, *vesselsAdaptationRate  ]
      - type: FindMax
        parameters: []
      - type: Spawn
        parameters: [ *cloningRange, *resourceLowerBound, *maxChildren, *minSpawnWait ]

deployments:
  - type: Point
    parameters: [0, 0]
    programs:
      - *program
    contents:
      - molecule: parent
        concentration: 0
      - molecule: resource
        concentration: *maxResource
      - molecule: children-count
        concentration: 0
    properties:
      - type: it.unibo.collektive.alchemist.device.properties.impl.ExecutionClockProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [*resourceLowerBound, *maxResource]

launcher:
  type: DefaultLauncher
  parameters: {
    batch: ["seed", "maxChildren", "maxResource", "maxSuccess", "minSpawnWait", "resourceLowerBound"],
    autoStart: true,
    showProgress: true,
    parallelism: 2
  }

terminate:
    type: StableForSteps
    parameters: [ 1000, 3 ]

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "classic-vmc"
      interval: 1.0
      exportPath: "data"
    data:
      - time
      - type: NetworkDiameter
      - type: NumberOfNodes
      - type: NetworkDegree
        parameters: [ ]
      - molecule: children-count
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-success
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: resource
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: success
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-resource
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3

# from command line: CLONING_RANGE=5 CONST_COMPETITION_RATE=2 CONST_CONSUMPTION_RATE=0.1 CONST_PRODUCTION_RATE=0.1 CONST_TRANSFER_RATE=0.5 DEFAULT=0 MAX=20 MAX_CHILDREN=3 MAX_RESOURCE=3.0 MAX_SUCCESS=500.0 MIN=0 MIN_SPAWN_WAIT=21 RESOURCE_LOWER_BOUND=5.0 SENSOR_COMPETITION_RATE=0.1 SENSOR_PRODUCTION_RATE=1.0 SENSOR_TRANSFER_RATE=0.5 VESSELS_ADAPTATION_RATE=0.9 ./gradlew runClassicVMCGraphic
#    formula: System.getenv("CLONING_RANGE").toInt() #5
#    language: kotlin
#    formula: System.getenv("CONST_COMPETITION_RATE").toDouble() #2
#    language: kotlin
#    formula: System.getenv("CONST_CONSUMPTION_RATE").toDouble() 0.1
#    language: kotlin
#    formula: System.getenv("CONST_PRODUCTION_RATE").toDouble() #0.1
#    language: kotlin
#    formula: System.getenv("CONST_TRANSFER_RATE").toDouble() #0.5
#    language: kotlin
#    formula: System.getenv("MAX_CHILDREN").toInt() #3
#    language: kotlin
#    formula: System.getenv("MAX_RESOURCE").toDouble() #1
#    language: kotlin
#    formula: System.getenv("MAX_SUCCESS").toDouble() #500.0
#    language: kotlin
#    formula: System.getenv("MIN_SPAWN_WAIT").toInt() #21
#    language: kotlin
#    formula: System.getenv("CLONING_RANGE").toInt() * 1.01
#    language: kotlin
#    formula: System.getenv("RESOURCE_LOWER_BOUND").toDouble() #1.0
#    language: kotlin
#    formula: System.getenv("SENSOR_COMPETITION_RATE").toDouble() #0.1
#    language: kotlin
#    formula: System.getenv("SENSOR_PRODUCTION_RATE").toDouble() #1.0
#    language: kotlin
#    formula: System.getenv("SENSOR_TRANSFER_RATE").toDouble() #0.5
#    language: kotlin
#    formula: System.getenv("VESSELS_ADAPTATION_RATE").toDouble() #0.9
#    language: kotlin
#      formula: System.getenv("MIN").toDouble() #0
#      language: kotlin
#      formula: System.getenv("MAX").toDouble() #20
#      language: kotlin
#      formula: System.getenv("DEFAULT").toDouble() #0
