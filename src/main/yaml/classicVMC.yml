# from command line: CLONING_RANGE=5 CONST_COMPETITION_RATE=2 CONST_CONSUMPTION_RATE=0.1 CONST_PRODUCTION_RATE=0.1 CONST_TRANSFER_RATE=0.5 DEFAULT=0 MAX=20 MAX_CHILDREN=3 MAX_RESOURCE=3.0 MAX_SUCCESS=500.0 MIN=0 MIN_SPAWN_WAIT=21 RESOURCE_LOWER_BOUND=5.0 SENSOR_COMPETITION_RATE=0.1 SENSOR_PRODUCTION_RATE=1.0 SENSOR_TRANSFER_RATE=0.5 VESSELS_ADAPTATION_RATE=0.9 ./gradlew runClassicVMCGraphic
variables:
  cloningRange: &cloningRange
    formula: System.getenv("CLONING_RANGE").toInt() #5
    language: kotlin
  constCompetitionRate: &constCompetitionRate
    formula: System.getenv("CONST_COMPETITION_RATE").toDouble() #2
    language: kotlin
  constConsumptionRate: &constConsumptionRate
    formula: System.getenv("CONST_CONSUMPTION_RATE").toDouble() #0.1
    language: kotlin
  constProductionRate: &constProductionRate
    formula: System.getenv("CONST_PRODUCTION_RATE").toDouble() #0.1
    language: kotlin
  constTransferRate: &constTransferRate
    formula: System.getenv("CONST_TRANSFER_RATE").toDouble() #0.5
    language: kotlin
  gaussianShape: &gaussianShape
    5
  maxChildren: &maxChildren
    formula: System.getenv("MAX_CHILDREN").toInt() #5
    language: kotlin
  maxResource: &maxResource
    formula: System.getenv("MAX_RESOURCE").toDouble() #1
    language: kotlin
  maxSuccess: &maxSuccess
    formula: System.getenv("MAX_SUCCESS").toDouble() #500.0
    language: kotlin
  minSpawnWait: &minSpawnWait
    formula: System.getenv("MIN_SPAWN_WAIT").toInt() #21
    language: kotlin
  range: &range
    formula: System.getenv("CLONING_RANGE").toInt() * 1.01
    language: kotlin
  resourceLowerBound: &resourceLowerBound
    formula: System.getenv("RESOURCE_LOWER_BOUND").toDouble() #1.0
    language: kotlin
  sensorCompetitionRate: &sensorCompetitionRate
    formula: System.getenv("SENSOR_COMPETITION_RATE").toDouble() #0.1
    language: kotlin
  sensorProductionRate: &sensorProductionRate
    formula: System.getenv("SENSOR_PRODUCTION_RATE").toDouble() #1.0
    language: kotlin
  sensorTransferRate: &sensorTransferRate
    formula: System.getenv("SENSOR_TRANSFER_RATE").toDouble() #0.5
    language: kotlin
  vesselsAdaptationRate: &vesselsAdaptationRate
    formula: System.getenv("VESSELS_ADAPTATION_RATE").toDouble() #0.9
    language: kotlin
# seed
  seed: &seed
    min:
      formula: System.getenv("MIN").toDouble() #0
      language: kotlin
    max:
      formula: System.getenv("MAX").toDouble() #20
      language: kotlin
    step: 1
    default:
      formula: System.getenv("DEFAULT").toDouble() #0
      language: kotlin

network-model:
  type: ConnectWithinDistance
  parameters: *range

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [5, 25, *maxSuccess, *gaussianShape ]
    molecule: successSource

incarnation: collektive

_pool: &program
  - time-distribution:
      type: DiracComb
      parameters: [ 0, 1 ]
    type: Event
    actions:
      - type: EvaluateSuccess
        parameters: [ *constProductionRate, *constTransferRate, *sensorProductionRate, *sensorTransferRate ]
      - type: ResourceDistribution
        parameters: [ *constConsumptionRate, *constCompetitionRate, *sensorCompetitionRate, *vesselsAdaptationRate  ]
      - type: FindMax
        parameters: []
      - type: Spawn
        parameters: [ *cloningRange, *resourceLowerBound, *maxChildren, *minSpawnWait ]

deployments:
  - type: Point
    parameters: [0, 0]
    programs:
      - *program
    contents:
      - molecule: parent
        concentration: 0
      - molecule: resource
        concentration: *maxResource
    properties:
      - type: it.unibo.collektive.alchemist.device.properties.impl.ExecutionClockProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [*resourceLowerBound, *maxResource]

#terminate:
#    type: AfterTime
#    parameters: 100

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "classic-vmc"
      interval: 1.0
      exportPath: "data"
    data:
      - time
      - molecule: children-count
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-success
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: resource
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: success
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-resource
        aggregators: [ min, max, mean, stdev ]
        value-filter: onlyfinite
        precision: 3
