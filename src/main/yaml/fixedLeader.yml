# from command line:  CLONING_RANGE=5 DEFAULT=0 LEADER_RADIUS=100.0 MAX=20 MAX_CHILDREN=3 MAX_RESOURCE=1000.0 MIN=0 MIN_SPAWN_WAIT=40.0 RESOURCE_LOWER_BOUND=1.0 ./gradlew runFixedLeaderGraphic
variables:
  cloningRange: &cloningRange
    formula: 5
  gaussianShape: &gaussianShape
    5
  leaderRadius: &leaderRadius
    100.0
  #    formula: System.getenv("LEADER_RADIUS").toDouble() # 100.0
  #    language: kotlin
  maxChildren: &maxChildren
    3.0
#    type: ArbitraryVariable
#    parameters: [ 3.0, [ 1.0, 2.0, 3.0, 5.0 ] ]
  #    formula: System.getenv("MAX_CHILDREN").toInt() #3
  #    language: kotlin
  maxResource: &maxResource
    type: ArbitraryVariable
    parameters: [ 350.0, [ 100.0, 200.0, 300.0, 500.0, 1000.0 ] ]
  #    formula: System.getenv("MAX_RESOURCE").toDouble() #500.0
  #    language: kotlin
  maxSuccess: &maxSuccess
    type: ArbitraryVariable
    parameters: [ 500.0, [ 100.0, 200.0, 300.0, 500.0, 1000.0 ] ]
#    formula: maxResource #success same as resource
#  minSpawnWait: &minSpawnWait
#    type: LinearVariable
#    parameters: [ 40.0, 1.0, 71.0, 10.0 ]
  #    formula: System.getenv("MIN_SPAWN_WAIT").toDouble() #40.0 / 20.0
  #    language: kotlin
  range: &range
    formula: cloningRange * 1.01
  resourceLowerBound: &resourceLowerBound
    type: LinearVariable
    parameters: [ 5.0, 1.0, 10.0, 1.0 ]
  #    formula: System.getenv("RESOURCE_LOWER_BOUND").toDouble() #1.0
  #    language: kotlin
  seed: &seed
    min: 0
    max: 10
    step: 1
    default: 0
network-model:
  type: ConnectWithinDistance
  parameters: *range

seeds:
  scenario: *seed
  simulation: *seed

layers:
  - type: BidimensionalGaussianLayer
    parameters: [0, 25, *maxSuccess, *gaussianShape]
    molecule: successSource

incarnation: collektive

_pool: &program
  - time-distribution: 1
#      type: DiracComb
#      parameters: [ 0, 1 ]
    type: Event
    actions:
      - type: RunCollektiveProgram
        parameters: [it.unibo.collektive.vmc.FieldVMCFixedLeaderKt.fixedRootStability]

deployments:
  - type: Point
    parameters: [0, 0]
    programs:
      - *program
    contents:
      - molecule: leader
        concentration: true
    properties:
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LayerProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.RandomNodeProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LocationSensorProperty
      - type: it.unibo.collektive.alchemist.device.sensors.impl.SuccessSensorProperty
        parameters: [ *maxSuccess ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.LeaderSensorProperty
        parameters: [ *leaderRadius ]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.ResourceSensorProperty
        parameters: [*resourceLowerBound, *maxResource]
      - type: it.unibo.collektive.alchemist.device.sensors.impl.DeviceSpawner
        parameters: [ *cloningRange, *maxChildren ] #, *minSpawnWait

launcher:
  type: it.unibo.alchemist.boundary.launchers.NelderMeadLauncher
  parameters: {
    variables: ["maxResource", "resourceLowerBound", "maxSuccess"],
    metrics: ["nodes", "hub", "diameter", "density", "degree"],
    maxBatchSize: 10,
    autoStart: true,
    showProgress: true,
    parallelism: 2
  }

terminate:
  type: StableForSteps
  parameters: [ 200, 2 ]

export:
  - type: CSVExporter
    parameters:
      fileNameRoot: "fixed-leader"
      interval: 1.0
      exportPath: "data"
    data:
      - time
      - type: NumberOfNodes
      - type: NetworkHub
      - type: NetworkDiameter
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, median ]
      - type: NetworkDensity
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, variance, median, StandardDeviation ]
      - type: NodeDegree
        parameters:
          filter: onlyfinite
          aggregators: [ max, mean, variance, median, StandardDeviation ]
      - molecule: children-count
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-success
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: resource
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: success
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3
      - molecule: local-resource
        aggregators: [ max, mean, variance, median, StandardDeviation ]
        value-filter: onlyfinite
        precision: 3

#RESOURCE_LOWER_BOUND=1.0;MIN=0;MAX=20;LEADER_RADIUS=100.0;CLONING_RANGE=5;MAX_RESOURCE=500.0;MIN_SPAWN_WAIT=40.0;DEFAULT=0;MAX_CHILDREN=3
